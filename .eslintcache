[{"/Users/ningdeng/github/registry-app1/src/index.js":"1","/Users/ningdeng/github/registry-app1/src/App.js":"2","/Users/ningdeng/github/registry-app1/src/reportWebVitals.js":"3","/Users/ningdeng/github/registry-app1/src/routes/Home.js":"4","/Users/ningdeng/github/registry-app1/src/routes/Registry.js":"5","/Users/ningdeng/github/registry-app1/src/routes/ToDoList.js":"6"},{"size":500,"mtime":1610355490086,"results":"7","hashOfConfig":"8"},{"size":671,"mtime":1610424006843,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610355490087,"results":"10","hashOfConfig":"8"},{"size":333,"mtime":1610423990060,"results":"11","hashOfConfig":"8"},{"size":1982,"mtime":1610423967527,"results":"12","hashOfConfig":"8"},{"size":3310,"mtime":1610421034549,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1pu2m4a",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/Users/ningdeng/github/registry-app1/src/index.js",[],["28","29"],"/Users/ningdeng/github/registry-app1/src/App.js",["30"],"/Users/ningdeng/github/registry-app1/src/reportWebVitals.js",[],"/Users/ningdeng/github/registry-app1/src/routes/Home.js",[],"/Users/ningdeng/github/registry-app1/src/routes/Registry.js",[],"/Users/ningdeng/github/registry-app1/src/routes/ToDoList.js",["31","32"],"import React, { useState, useEffect} from \"react\"\nimport { Link } from \"react-router-dom\"\n\nfunction ToDoList() {\n    const [registryData, setRegistryData] = useState([])\n    const [textInput, setTextInput] = useState(\"\")\n    const [error, setError] = useState(false)\n\n    const [doneData, setDoneData] = useState([])\n    const [allDone, setAllDone] = useState(false)\n\n    const addItem = (e) => {\n        e.preventDefault();\n        if (error) return;\n\n        const tempData = [...registryData];\n        tempData.push(textInput)\n        setRegistryData(tempData)\n        setTextInput(\"\")\n    }\n\n    useEffect(() => {\n        if (textInput.length > 10) setError(true);\n        else setError(false)\n    }, [textInput])\n\n    useEffect(() => {\n        if (registryData.length == 0 && doneData.length > 0) setAllDone(true);\n        else setAllDone(false);\n    }, [registryData])\n\n    // console.log(registryData)\n\n    const removeItem = (index) => {\n        let newData = [...registryData]\n        newData.splice(index, 1)\n        setRegistryData(newData)\n    }\n\n    const editItem = (index) => {\n        if (error) return;\n\n        let newData = [...registryData]\n        newData[index] = textInput;\n\n        setRegistryData(newData)\n    }\n\n    const moveToDone = (index) => {\n        const tempData = [...doneData]\n        tempData.push(registryData[index])\n        setDoneData(tempData)\n        let newData = [...registryData]\n        newData.splice(index, 1)\n        setRegistryData(newData)\n    }\n\n    return (\n        <main>\n        <section>\n            <h1>To Do List</h1>\n            <nav>\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/registry\">Registry</Link>\n            </nav>\n            <form onSubmit={addItem}>\n                <label>Type to add/update: &nbsp;</label>\n                <input type=\"text\" value={textInput} onChange={(e) => setTextInput(e.target.value)} />\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n            {error ? <span style={{color: \"red\"}}> Error occurred.</span> : <span> </span>}\n            </section>\n            <section>\n            <h2> To Do ({registryData.length}) </h2>\n            {allDone ? <span style={{background: \"green\"}}> Hooray! All jobs are done! </span> : <span> </span>}\n            {\n                registryData.map((item, index) => {\n                    return (\n                        <li key={index}>\n                            <button onClick = {() => moveToDone(index)}>&nbsp;&nbsp;Done&nbsp;&nbsp;</button>\n                            &nbsp; {item} &nbsp;\n                            <button onClick = {() => removeItem(index)}>Remove</button>\n                            <button onClick = {() => editItem(index)}>Update</button>\n                        </li>\n                    )\n                })\n            }\n        </section>\n        <section>\n            <h2> Done ({doneData.length})</h2>\n            {\n                doneData.map((item, index) => {\n                    return (\n                        <li key={index}>\n                            <button>Undone</button>\n                            &nbsp; {item} &nbsp;\n                        </li>\n                    )\n                })\n            }\n        </section>\n        </main>\n    );\n}\n\nexport default ToDoList;",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":39,"nodeType":"39","messageId":"40","endLine":2,"endColumn":43},{"ruleId":"41","severity":1,"message":"42","line":28,"column":33,"nodeType":"43","messageId":"44","endLine":28,"endColumn":35},{"ruleId":"45","severity":1,"message":"46","line":30,"column":8,"nodeType":"47","endLine":30,"endColumn":22,"suggestions":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'doneData.length'. Either include it or remove the dependency array.","ArrayExpression",["51"],"no-global-assign","no-unsafe-negation",{"desc":"52","fix":"53"},"Update the dependencies array to be: [doneData.length, registryData]",{"range":"54","text":"55"},[859,873],"[doneData.length, registryData]"]